apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: ingress-gateway
spec:
  selector:
    istio: ingressgateway # use istio default ingress gateway
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: istio-ingressgateway-certs # must be the same as secret
    hosts:
    - "*"

---

apiVersion: v1
kind: Service
metadata:
  name: istio-ingressgateway
  namespace: istio-system
  annotations:
    cloud.google.com/load-balancer-type: "External"
    cloud.google.com/load-balancer-ip: "35.204.113.30"
spec:
  type: LoadBalancer
  selector:
    app: istio-ingressgateway
  ports:
  - name: http2
    port: 80
    targetPort: 8080
  - name: https
    port: 443
    targetPort: 8443

---

apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: track-istio
spec:
  hosts:
  - "*"
  gateways:
  - ingress-gateway
  http:
  - match:
    - uri:
        prefix: /api/tracks
    route:
    - destination:
        port:
          number: 5000
        host: track-logic
---

apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: artists-istio
spec:
  hosts:
  - "*"
  gateways:
  - ingress-gateway
  http:
  - match:
    - uri:
        prefix: /api/artists
    route:
    - destination:
        port:
          number: 5001
        host: artist-logic
---

apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: genre-istio 
spec:
  hosts:
  - "*"
  gateways:
  - ingress-gateway
  http:
  - match:
    - uri:
        prefix: /api/genres
    route:
    - destination:
        port:
          number: 5002
        host: genre-logic
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: playlist-istio
spec:
  hosts:
  - "*"
  gateways:
  - ingress-gateway
  http:
  - match:
    - uri:
        prefix: /api/playlists
    route:
    - destination:
        port:
          number: 5003
        host: playlist-logic
---

apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: release-istio
spec:
  hosts:
  - "*"
  gateways:
  - ingress-gateway
  http:
  - match:
    - uri:
        prefix: /api/releases
    route:
    - destination:
        port:
          number: 5004
        host: release-logic

---

apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
spec:
  mtls:
    mode: STRICT

---

apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: auth-istio
spec:
  hosts:
  - "*"
  gateways:
  - ingress-gateway
  http:
  - match:
    - uri:
        exact: /api/auth/login
    - uri:
        exact: /api/auth/logout
    - uri:
        exact: /api/auth/callback
    route:
    - destination:
        port:
          number: 5055
        host: auth-logic

---

apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: auth0
spec:
  jwtRules:
  - issuer: "https://dev-ajv2y52zheuy2djo.us.auth0.com/"
    jwksUri: "https://dev-ajv2y52zheuy2djo.us.auth0.com/.well-known/jwks.json"
    fromHeaders:
    - name: "Authorization"
      prefix: "Bearer "

---

apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: artist-logic-ap
spec:
  selector:
    matchLabels:
      app: artist-logic
  action: ALLOW
  rules:
  - from:
    - source:
        principals: ["*"]
    to:
    - operation:
        methods: ["POST"]
        paths: ["/artists"]
    when:
    - key: request.auth.claims[permissions]
      values: ["write:artists"]
  - to:
    - operation:
        methods: ["GET"]

---

apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: genre-logic-ap
spec:
  selector:
    matchLabels:
      app: genre-logic
  action: ALLOW
  rules:
  - from:
    - source:
        principals: ["*"]
    to:
    - operation:
        methods: ["POST"]
        paths: ["/genres"]
    when:
    - key: request.auth.claims[permissions]
      values: ["write:genres"]
  - from:
    - source:
        principals: ["*"]
    to:
    - operation:
        methods: ["PUT"]
        paths: ["/genres/{genre_id}"]
    when:
    - key: request.auth.claims[permissions]
      values: ["write:genres"]
  - to:
    - operation:
        methods: ["GET"]
  
---

apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: release-logic-ap
spec:
  selector:
    matchLabels:
      app: release-logic
  action: ALLOW
  rules:
  - from:
    - source:
        principals: ["*"]
    to:
    - operation:
        methods: ["POST"]
        paths: ["/releases"]
    when:
    - key: request.auth.claims[permissions]
      values: ["write:releases"]
  - to:
    - operation:
        methods: ["GET"]

---

apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: playlist-logic-ap
spec:
  selector:
    matchLabels:
      app: playlist-logic
  action: ALLOW
  rules:
  - from:
    - source:
        principals: ["*"]
    to:
    - operation:
        methods: ["POST"]
        paths: ["/playlists"]
    when:
    - key: request.auth.claims[permissions]
      values: ["write:playlists"]
  - from:
    - source:
        principals: ["*"]
    to:
    - operation:
        methods: ["PUT"]
        paths: ["/playlists/{playlist_id}/tracks"]
    when:
    - key: request.auth.claims[permissions]
      values: ["write:playlists"]
  - from:
    - source:
        principals: ["*"]
    to:
    - operation:
        methods: ["DELETE"]
        paths: ["/playlists/{playlist_id}"]
    when:
    - key: request.auth.claims[permissions]
      values: ["write:playlists"]
  - to:
    - operation:
        methods: ["GET"]

---

apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: track-logic-ap
spec:
  selector:
    matchLabels:
      app: track-logic
  action: ALLOW
  rules:
  - from:
    - source:
        principals: ["*"]
    to:
    - operation:
        methods: ["POST"]
        paths: ["/tracks"]
    when:
    - key: request.auth.claims[permissions]
      values: ["write:tracks"]
  - from:
    - source:
        principals: ["*"]
    to:
    - operation:
        methods: ["DELETE"]
        paths: ["/tracks/{track_id}"]
    when:
    - key: request.auth.claims[permissions]
      values: ["write:tracks"]
  - to:
    - operation:
        methods: ["GET"]

---

apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: jwt-redirect-filter
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      istio: ingressgateway  # Applies to the Istio ingress gateway
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: GATEWAY
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.router"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.lua
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
          inline_code: |
            function envoy_on_request(request_handle)
                local path = request_handle:headers():get(":path")
            
                if string.match(path, "^/api/auth/") then
                  return
                end

                local cookies = request_handle:headers():get("cookie")
                local jwt_token = nil
                if cookies ~= nil then
                    for cookie in string.gmatch(cookies, "[^;]+") do
                        local key, value = string.match(cookie, "(%s*istio%s*)=(%s*[^;]+)")
                        if key ~= nil and value ~= nil then
                            jwt_token = value
                            request_handle:headers():add("Authorization", "Bearer " .. jwt_token)
                            break
                        end
                    end
                end

                if jwt_token == nil then
                    request_handle:respond(
                        {[":status"] = "302", ["Location"] = "https://35.204.113.30/api/auth/login"},
                        "Redirecting to login"
                    )
                end
              end
