# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import genre_pb2 as genre__pb2


class GenreServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetGenresList = channel.unary_unary(
                '/GenreService/GetGenresList',
                request_serializer=genre__pb2.Empty.SerializeToString,
                response_deserializer=genre__pb2.GetGenresListResponse.FromString,
                )
        self.AddGenre = channel.unary_unary(
                '/GenreService/AddGenre',
                request_serializer=genre__pb2.AddGenreRequest.SerializeToString,
                response_deserializer=genre__pb2.AddGenreResponse.FromString,
                )
        self.GetGenre = channel.unary_unary(
                '/GenreService/GetGenre',
                request_serializer=genre__pb2.GetGenreRequest.SerializeToString,
                response_deserializer=genre__pb2.GetGenreResponse.FromString,
                )
        self.DeleteGenre = channel.unary_unary(
                '/GenreService/DeleteGenre',
                request_serializer=genre__pb2.DeleteGenreRequest.SerializeToString,
                response_deserializer=genre__pb2.DeleteGenreResponse.FromString,
                )
        self.UpdateGenre = channel.unary_unary(
                '/GenreService/UpdateGenre',
                request_serializer=genre__pb2.UpdateGenreRequest.SerializeToString,
                response_deserializer=genre__pb2.UpdateGenreResponse.FromString,
                )
        self.GetGenreTrack = channel.unary_unary(
                '/GenreService/GetGenreTrack',
                request_serializer=genre__pb2.GetGenreTrackRequest.SerializeToString,
                response_deserializer=genre__pb2.GetGenreTrackResponse.FromString,
                )


class GenreServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetGenresList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddGenre(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGenre(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteGenre(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateGenre(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGenreTrack(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GenreServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetGenresList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGenresList,
                    request_deserializer=genre__pb2.Empty.FromString,
                    response_serializer=genre__pb2.GetGenresListResponse.SerializeToString,
            ),
            'AddGenre': grpc.unary_unary_rpc_method_handler(
                    servicer.AddGenre,
                    request_deserializer=genre__pb2.AddGenreRequest.FromString,
                    response_serializer=genre__pb2.AddGenreResponse.SerializeToString,
            ),
            'GetGenre': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGenre,
                    request_deserializer=genre__pb2.GetGenreRequest.FromString,
                    response_serializer=genre__pb2.GetGenreResponse.SerializeToString,
            ),
            'DeleteGenre': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteGenre,
                    request_deserializer=genre__pb2.DeleteGenreRequest.FromString,
                    response_serializer=genre__pb2.DeleteGenreResponse.SerializeToString,
            ),
            'UpdateGenre': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateGenre,
                    request_deserializer=genre__pb2.UpdateGenreRequest.FromString,
                    response_serializer=genre__pb2.UpdateGenreResponse.SerializeToString,
            ),
            'GetGenreTrack': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGenreTrack,
                    request_deserializer=genre__pb2.GetGenreTrackRequest.FromString,
                    response_serializer=genre__pb2.GetGenreTrackResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GenreService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GenreService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetGenresList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GenreService/GetGenresList',
            genre__pb2.Empty.SerializeToString,
            genre__pb2.GetGenresListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddGenre(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GenreService/AddGenre',
            genre__pb2.AddGenreRequest.SerializeToString,
            genre__pb2.AddGenreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGenre(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GenreService/GetGenre',
            genre__pb2.GetGenreRequest.SerializeToString,
            genre__pb2.GetGenreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteGenre(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GenreService/DeleteGenre',
            genre__pb2.DeleteGenreRequest.SerializeToString,
            genre__pb2.DeleteGenreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateGenre(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GenreService/UpdateGenre',
            genre__pb2.UpdateGenreRequest.SerializeToString,
            genre__pb2.UpdateGenreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGenreTrack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GenreService/GetGenreTrack',
            genre__pb2.GetGenreTrackRequest.SerializeToString,
            genre__pb2.GetGenreTrackResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
