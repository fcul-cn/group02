# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import playlist_pb2 as playlist__pb2


class PlaylistServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getPlaylist = channel.unary_unary(
                '/PlaylistService/getPlaylist',
                request_serializer=playlist__pb2.GetPlaylistRequest.SerializeToString,
                response_deserializer=playlist__pb2.GetPlaylistResponse.FromString,
                )
        self.deletePlaylist = channel.unary_unary(
                '/PlaylistService/deletePlaylist',
                request_serializer=playlist__pb2.DeletePlaylistRequest.SerializeToString,
                response_deserializer=playlist__pb2.DeletePlaylistResponse.FromString,
                )
        self.addPlaylist = channel.unary_unary(
                '/PlaylistService/addPlaylist',
                request_serializer=playlist__pb2.AddPlaylistRequest.SerializeToString,
                response_deserializer=playlist__pb2.AddPlaylistResponse.FromString,
                )
        self.getPlaylistTracks = channel.unary_unary(
                '/PlaylistService/getPlaylistTracks',
                request_serializer=playlist__pb2.GetPlaylistTracksRequest.SerializeToString,
                response_deserializer=playlist__pb2.GetPlaylistTracksResponse.FromString,
                )
        self.addTrackToPlaylist = channel.unary_unary(
                '/PlaylistService/addTrackToPlaylist',
                request_serializer=playlist__pb2.AddTrackToPlaylistRequest.SerializeToString,
                response_deserializer=playlist__pb2.AddTrackToPlaylistResponse.FromString,
                )
        self.deleteTrackFromPlaylist = channel.unary_unary(
                '/PlaylistService/deleteTrackFromPlaylist',
                request_serializer=playlist__pb2.DeleteTrackFromPlaylistRequest.SerializeToString,
                response_deserializer=playlist__pb2.DeleteTrackFromPlaylistResponse.FromString,
                )


class PlaylistServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getPlaylist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deletePlaylist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addPlaylist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPlaylistTracks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addTrackToPlaylist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteTrackFromPlaylist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PlaylistServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getPlaylist': grpc.unary_unary_rpc_method_handler(
                    servicer.getPlaylist,
                    request_deserializer=playlist__pb2.GetPlaylistRequest.FromString,
                    response_serializer=playlist__pb2.GetPlaylistResponse.SerializeToString,
            ),
            'deletePlaylist': grpc.unary_unary_rpc_method_handler(
                    servicer.deletePlaylist,
                    request_deserializer=playlist__pb2.DeletePlaylistRequest.FromString,
                    response_serializer=playlist__pb2.DeletePlaylistResponse.SerializeToString,
            ),
            'addPlaylist': grpc.unary_unary_rpc_method_handler(
                    servicer.addPlaylist,
                    request_deserializer=playlist__pb2.AddPlaylistRequest.FromString,
                    response_serializer=playlist__pb2.AddPlaylistResponse.SerializeToString,
            ),
            'getPlaylistTracks': grpc.unary_unary_rpc_method_handler(
                    servicer.getPlaylistTracks,
                    request_deserializer=playlist__pb2.GetPlaylistTracksRequest.FromString,
                    response_serializer=playlist__pb2.GetPlaylistTracksResponse.SerializeToString,
            ),
            'addTrackToPlaylist': grpc.unary_unary_rpc_method_handler(
                    servicer.addTrackToPlaylist,
                    request_deserializer=playlist__pb2.AddTrackToPlaylistRequest.FromString,
                    response_serializer=playlist__pb2.AddTrackToPlaylistResponse.SerializeToString,
            ),
            'deleteTrackFromPlaylist': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteTrackFromPlaylist,
                    request_deserializer=playlist__pb2.DeleteTrackFromPlaylistRequest.FromString,
                    response_serializer=playlist__pb2.DeleteTrackFromPlaylistResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PlaylistService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PlaylistService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getPlaylist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PlaylistService/getPlaylist',
            playlist__pb2.GetPlaylistRequest.SerializeToString,
            playlist__pb2.GetPlaylistResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deletePlaylist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PlaylistService/deletePlaylist',
            playlist__pb2.DeletePlaylistRequest.SerializeToString,
            playlist__pb2.DeletePlaylistResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addPlaylist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PlaylistService/addPlaylist',
            playlist__pb2.AddPlaylistRequest.SerializeToString,
            playlist__pb2.AddPlaylistResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getPlaylistTracks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PlaylistService/getPlaylistTracks',
            playlist__pb2.GetPlaylistTracksRequest.SerializeToString,
            playlist__pb2.GetPlaylistTracksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addTrackToPlaylist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PlaylistService/addTrackToPlaylist',
            playlist__pb2.AddTrackToPlaylistRequest.SerializeToString,
            playlist__pb2.AddTrackToPlaylistResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteTrackFromPlaylist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PlaylistService/deleteTrackFromPlaylist',
            playlist__pb2.DeleteTrackFromPlaylistRequest.SerializeToString,
            playlist__pb2.DeleteTrackFromPlaylistResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
