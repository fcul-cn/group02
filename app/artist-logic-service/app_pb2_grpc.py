# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import app_pb2 as app__pb2


class ArtistServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getArtist = channel.unary_unary(
                '/ArtistService/getArtist',
                request_serializer=app__pb2.GetArtistRequest.SerializeToString,
                response_deserializer=app__pb2.GetArtistResponse.FromString,
                )
        self.addArtist = channel.unary_unary(
                '/ArtistService/addArtist',
                request_serializer=app__pb2.AddArtistRequest.SerializeToString,
                response_deserializer=app__pb2.AddArtistResponse.FromString,
                )
        self.GetReleasesById = channel.unary_unary(
                '/ArtistService/GetReleasesById',
                request_serializer=app__pb2.GetReleasesByIdRequest.SerializeToString,
                response_deserializer=app__pb2.GetReleasesByIdResponse.FromString,
                )


class ArtistServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getArtist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addArtist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetReleasesById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ArtistServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getArtist': grpc.unary_unary_rpc_method_handler(
                    servicer.getArtist,
                    request_deserializer=app__pb2.GetArtistRequest.FromString,
                    response_serializer=app__pb2.GetArtistResponse.SerializeToString,
            ),
            'addArtist': grpc.unary_unary_rpc_method_handler(
                    servicer.addArtist,
                    request_deserializer=app__pb2.AddArtistRequest.FromString,
                    response_serializer=app__pb2.AddArtistResponse.SerializeToString,
            ),
            'GetReleasesById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetReleasesById,
                    request_deserializer=app__pb2.GetReleasesByIdRequest.FromString,
                    response_serializer=app__pb2.GetReleasesByIdResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ArtistService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ArtistService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getArtist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ArtistService/getArtist',
            app__pb2.GetArtistRequest.SerializeToString,
            app__pb2.GetArtistResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addArtist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ArtistService/addArtist',
            app__pb2.AddArtistRequest.SerializeToString,
            app__pb2.AddArtistResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetReleasesById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ArtistService/GetReleasesById',
            app__pb2.GetReleasesByIdRequest.SerializeToString,
            app__pb2.GetReleasesByIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class GenreServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetGenresList = channel.unary_unary(
                '/GenreService/GetGenresList',
                request_serializer=app__pb2.GetGenresListRequest.SerializeToString,
                response_deserializer=app__pb2.GetGenresListResponse.FromString,
                )
        self.AddGenre = channel.unary_unary(
                '/GenreService/AddGenre',
                request_serializer=app__pb2.AddGenreRequest.SerializeToString,
                response_deserializer=app__pb2.AddGenreResponse.FromString,
                )
        self.GetGenre = channel.unary_unary(
                '/GenreService/GetGenre',
                request_serializer=app__pb2.GetGenreRequest.SerializeToString,
                response_deserializer=app__pb2.GetGenreResponse.FromString,
                )
        self.DeleteGenre = channel.unary_unary(
                '/GenreService/DeleteGenre',
                request_serializer=app__pb2.DeleteGenreRequest.SerializeToString,
                response_deserializer=app__pb2.DeleteGenreResponse.FromString,
                )
        self.UpdateGenre = channel.unary_unary(
                '/GenreService/UpdateGenre',
                request_serializer=app__pb2.UpdateGenreRequest.SerializeToString,
                response_deserializer=app__pb2.UpdateGenreResponse.FromString,
                )


class GenreServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetGenresList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddGenre(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGenre(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteGenre(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateGenre(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GenreServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetGenresList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGenresList,
                    request_deserializer=app__pb2.GetGenresListRequest.FromString,
                    response_serializer=app__pb2.GetGenresListResponse.SerializeToString,
            ),
            'AddGenre': grpc.unary_unary_rpc_method_handler(
                    servicer.AddGenre,
                    request_deserializer=app__pb2.AddGenreRequest.FromString,
                    response_serializer=app__pb2.AddGenreResponse.SerializeToString,
            ),
            'GetGenre': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGenre,
                    request_deserializer=app__pb2.GetGenreRequest.FromString,
                    response_serializer=app__pb2.GetGenreResponse.SerializeToString,
            ),
            'DeleteGenre': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteGenre,
                    request_deserializer=app__pb2.DeleteGenreRequest.FromString,
                    response_serializer=app__pb2.DeleteGenreResponse.SerializeToString,
            ),
            'UpdateGenre': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateGenre,
                    request_deserializer=app__pb2.UpdateGenreRequest.FromString,
                    response_serializer=app__pb2.UpdateGenreResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GenreService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GenreService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetGenresList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GenreService/GetGenresList',
            app__pb2.GetGenresListRequest.SerializeToString,
            app__pb2.GetGenresListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddGenre(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GenreService/AddGenre',
            app__pb2.AddGenreRequest.SerializeToString,
            app__pb2.AddGenreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGenre(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GenreService/GetGenre',
            app__pb2.GetGenreRequest.SerializeToString,
            app__pb2.GetGenreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteGenre(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GenreService/DeleteGenre',
            app__pb2.DeleteGenreRequest.SerializeToString,
            app__pb2.DeleteGenreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateGenre(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GenreService/UpdateGenre',
            app__pb2.UpdateGenreRequest.SerializeToString,
            app__pb2.UpdateGenreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PlaylistServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getPlaylist = channel.unary_unary(
                '/PlaylistService/getPlaylist',
                request_serializer=app__pb2.GetPlaylistRequest.SerializeToString,
                response_deserializer=app__pb2.GetPlaylistResponse.FromString,
                )
        self.deletePlaylist = channel.unary_unary(
                '/PlaylistService/deletePlaylist',
                request_serializer=app__pb2.DeletePlaylistRequest.SerializeToString,
                response_deserializer=app__pb2.DeletePlaylistResponse.FromString,
                )
        self.addPlaylist = channel.unary_unary(
                '/PlaylistService/addPlaylist',
                request_serializer=app__pb2.AddPlaylistRequest.SerializeToString,
                response_deserializer=app__pb2.AddPlaylistResponse.FromString,
                )
        self.getPlaylistTracks = channel.unary_unary(
                '/PlaylistService/getPlaylistTracks',
                request_serializer=app__pb2.GetPlaylistTracksRequest.SerializeToString,
                response_deserializer=app__pb2.GetPlaylistTracksResponse.FromString,
                )
        self.addTrackToPlaylist = channel.unary_unary(
                '/PlaylistService/addTrackToPlaylist',
                request_serializer=app__pb2.AddTrackToPlaylistRequest.SerializeToString,
                response_deserializer=app__pb2.AddTrackToPlaylistResponse.FromString,
                )
        self.deleteTrackFromPlaylist = channel.unary_unary(
                '/PlaylistService/deleteTrackFromPlaylist',
                request_serializer=app__pb2.DeleteTrackFromPlaylistRequest.SerializeToString,
                response_deserializer=app__pb2.DeleteTrackFromPlaylistResponse.FromString,
                )


class PlaylistServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getPlaylist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deletePlaylist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addPlaylist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPlaylistTracks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addTrackToPlaylist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteTrackFromPlaylist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PlaylistServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getPlaylist': grpc.unary_unary_rpc_method_handler(
                    servicer.getPlaylist,
                    request_deserializer=app__pb2.GetPlaylistRequest.FromString,
                    response_serializer=app__pb2.GetPlaylistResponse.SerializeToString,
            ),
            'deletePlaylist': grpc.unary_unary_rpc_method_handler(
                    servicer.deletePlaylist,
                    request_deserializer=app__pb2.DeletePlaylistRequest.FromString,
                    response_serializer=app__pb2.DeletePlaylistResponse.SerializeToString,
            ),
            'addPlaylist': grpc.unary_unary_rpc_method_handler(
                    servicer.addPlaylist,
                    request_deserializer=app__pb2.AddPlaylistRequest.FromString,
                    response_serializer=app__pb2.AddPlaylistResponse.SerializeToString,
            ),
            'getPlaylistTracks': grpc.unary_unary_rpc_method_handler(
                    servicer.getPlaylistTracks,
                    request_deserializer=app__pb2.GetPlaylistTracksRequest.FromString,
                    response_serializer=app__pb2.GetPlaylistTracksResponse.SerializeToString,
            ),
            'addTrackToPlaylist': grpc.unary_unary_rpc_method_handler(
                    servicer.addTrackToPlaylist,
                    request_deserializer=app__pb2.AddTrackToPlaylistRequest.FromString,
                    response_serializer=app__pb2.AddTrackToPlaylistResponse.SerializeToString,
            ),
            'deleteTrackFromPlaylist': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteTrackFromPlaylist,
                    request_deserializer=app__pb2.DeleteTrackFromPlaylistRequest.FromString,
                    response_serializer=app__pb2.DeleteTrackFromPlaylistResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PlaylistService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PlaylistService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getPlaylist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PlaylistService/getPlaylist',
            app__pb2.GetPlaylistRequest.SerializeToString,
            app__pb2.GetPlaylistResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deletePlaylist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PlaylistService/deletePlaylist',
            app__pb2.DeletePlaylistRequest.SerializeToString,
            app__pb2.DeletePlaylistResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addPlaylist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PlaylistService/addPlaylist',
            app__pb2.AddPlaylistRequest.SerializeToString,
            app__pb2.AddPlaylistResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getPlaylistTracks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PlaylistService/getPlaylistTracks',
            app__pb2.GetPlaylistTracksRequest.SerializeToString,
            app__pb2.GetPlaylistTracksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addTrackToPlaylist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PlaylistService/addTrackToPlaylist',
            app__pb2.AddTrackToPlaylistRequest.SerializeToString,
            app__pb2.AddTrackToPlaylistResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteTrackFromPlaylist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PlaylistService/deleteTrackFromPlaylist',
            app__pb2.DeleteTrackFromPlaylistRequest.SerializeToString,
            app__pb2.DeleteTrackFromPlaylistResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TrackServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getTrack = channel.unary_unary(
                '/TrackService/getTrack',
                request_serializer=app__pb2.GetTrackRequest.SerializeToString,
                response_deserializer=app__pb2.GetTrackResponse.FromString,
                )
        self.deleteTrack = channel.unary_unary(
                '/TrackService/deleteTrack',
                request_serializer=app__pb2.DeleteTrackRequest.SerializeToString,
                response_deserializer=app__pb2.DeleteTrackResponse.FromString,
                )
        self.addTrack = channel.unary_unary(
                '/TrackService/addTrack',
                request_serializer=app__pb2.AddTrackRequest.SerializeToString,
                response_deserializer=app__pb2.AddTrackResponse.FromString,
                )
        self.getTrackGenre = channel.unary_unary(
                '/TrackService/getTrackGenre',
                request_serializer=app__pb2.GetTrackGenreRequest.SerializeToString,
                response_deserializer=app__pb2.GetTrackGenreResponse.FromString,
                )
        self.getGenreTracks = channel.unary_unary(
                '/TrackService/getGenreTracks',
                request_serializer=app__pb2.GetGenreTracksRequest.SerializeToString,
                response_deserializer=app__pb2.GetGenreTracksResponse.FromString,
                )


class TrackServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getTrack(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteTrack(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addTrack(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTrackGenre(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getGenreTracks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TrackServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getTrack': grpc.unary_unary_rpc_method_handler(
                    servicer.getTrack,
                    request_deserializer=app__pb2.GetTrackRequest.FromString,
                    response_serializer=app__pb2.GetTrackResponse.SerializeToString,
            ),
            'deleteTrack': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteTrack,
                    request_deserializer=app__pb2.DeleteTrackRequest.FromString,
                    response_serializer=app__pb2.DeleteTrackResponse.SerializeToString,
            ),
            'addTrack': grpc.unary_unary_rpc_method_handler(
                    servicer.addTrack,
                    request_deserializer=app__pb2.AddTrackRequest.FromString,
                    response_serializer=app__pb2.AddTrackResponse.SerializeToString,
            ),
            'getTrackGenre': grpc.unary_unary_rpc_method_handler(
                    servicer.getTrackGenre,
                    request_deserializer=app__pb2.GetTrackGenreRequest.FromString,
                    response_serializer=app__pb2.GetTrackGenreResponse.SerializeToString,
            ),
            'getGenreTracks': grpc.unary_unary_rpc_method_handler(
                    servicer.getGenreTracks,
                    request_deserializer=app__pb2.GetGenreTracksRequest.FromString,
                    response_serializer=app__pb2.GetGenreTracksResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TrackService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TrackService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getTrack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TrackService/getTrack',
            app__pb2.GetTrackRequest.SerializeToString,
            app__pb2.GetTrackResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteTrack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TrackService/deleteTrack',
            app__pb2.DeleteTrackRequest.SerializeToString,
            app__pb2.DeleteTrackResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addTrack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TrackService/addTrack',
            app__pb2.AddTrackRequest.SerializeToString,
            app__pb2.AddTrackResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTrackGenre(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TrackService/getTrackGenre',
            app__pb2.GetTrackGenreRequest.SerializeToString,
            app__pb2.GetTrackGenreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getGenreTracks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TrackService/getGenreTracks',
            app__pb2.GetGenreTracksRequest.SerializeToString,
            app__pb2.GetGenreTracksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ReleaseServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRelease = channel.unary_unary(
                '/ReleaseService/GetRelease',
                request_serializer=app__pb2.GetReleaseRequest.SerializeToString,
                response_deserializer=app__pb2.GetReleaseResponse.FromString,
                )
        self.DeleteRelease = channel.unary_unary(
                '/ReleaseService/DeleteRelease',
                request_serializer=app__pb2.DeleteReleaseRequest.SerializeToString,
                response_deserializer=app__pb2.DeleteReleaseResponse.FromString,
                )
        self.AddRelease = channel.unary_unary(
                '/ReleaseService/AddRelease',
                request_serializer=app__pb2.AddReleaseRequest.SerializeToString,
                response_deserializer=app__pb2.AddReleaseResponse.FromString,
                )


class ReleaseServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetRelease(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRelease(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddRelease(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReleaseServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRelease': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRelease,
                    request_deserializer=app__pb2.GetReleaseRequest.FromString,
                    response_serializer=app__pb2.GetReleaseResponse.SerializeToString,
            ),
            'DeleteRelease': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRelease,
                    request_deserializer=app__pb2.DeleteReleaseRequest.FromString,
                    response_serializer=app__pb2.DeleteReleaseResponse.SerializeToString,
            ),
            'AddRelease': grpc.unary_unary_rpc_method_handler(
                    servicer.AddRelease,
                    request_deserializer=app__pb2.AddReleaseRequest.FromString,
                    response_serializer=app__pb2.AddReleaseResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ReleaseService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReleaseService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetRelease(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ReleaseService/GetRelease',
            app__pb2.GetReleaseRequest.SerializeToString,
            app__pb2.GetReleaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteRelease(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ReleaseService/DeleteRelease',
            app__pb2.DeleteReleaseRequest.SerializeToString,
            app__pb2.DeleteReleaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddRelease(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ReleaseService/AddRelease',
            app__pb2.AddReleaseRequest.SerializeToString,
            app__pb2.AddReleaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ArtistsReleasesServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetArtistReleasesIds = channel.unary_unary(
                '/ArtistsReleasesService/GetArtistReleasesIds',
                request_serializer=app__pb2.GetArtistReleasesIdRequest.SerializeToString,
                response_deserializer=app__pb2.GetArtistReleasesIdResponse.FromString,
                )


class ArtistsReleasesServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetArtistReleasesIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ArtistsReleasesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetArtistReleasesIds': grpc.unary_unary_rpc_method_handler(
                    servicer.GetArtistReleasesIds,
                    request_deserializer=app__pb2.GetArtistReleasesIdRequest.FromString,
                    response_serializer=app__pb2.GetArtistReleasesIdResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ArtistsReleasesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ArtistsReleasesService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetArtistReleasesIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ArtistsReleasesService/GetArtistReleasesIds',
            app__pb2.GetArtistReleasesIdRequest.SerializeToString,
            app__pb2.GetArtistReleasesIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
